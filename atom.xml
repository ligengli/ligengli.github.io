<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-19T11:11:44.934Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Li Geng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu 18 最大化、最小化、关闭按钮移动到左侧</title>
    <link href="http://yoursite.com/2019/08/19/ubuntu-icon/"/>
    <id>http://yoursite.com/2019/08/19/ubuntu-icon/</id>
    <published>2019-08-19T11:04:52.000Z</published>
    <updated>2019-08-19T11:11:44.934Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 18.04 的最大化、最小化和关闭按钮默认放在了右面，参考<a href="https://blog.csdn.net/mifangdebaise/article/details/80675397" target="_blank" rel="noopener">这篇博客</a>发现执行，调整按钮到左边。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.wm.preferences button-layout ‘close,maximize,minimize:’</span><br></pre></td></tr></table></figure><p>这样做后，关闭按钮不见了！！！</p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.wm.preferences button-layout ‘close,close,maximize,minimize:’</span><br></pre></td></tr></table></figure><p>即重复一次 close 搞定。原因不清楚！感觉第一个按钮会被覆盖！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu 18.04 的最大化、最小化和关闭按钮默认放在了右面，参考&lt;a href=&quot;https://blog.csdn.net/mifangdebaise/article/details/80675397&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
    
      <category term="ubuntu notes ui" scheme="http://yoursite.com/tags/ubuntu-notes-ui/"/>
    
  </entry>
  
  <entry>
    <title>变脸 (4) --- 视频</title>
    <link href="http://yoursite.com/2019/08/12/changeFace-4/"/>
    <id>http://yoursite.com/2019/08/12/changeFace-4/</id>
    <published>2019-08-12T06:41:03.000Z</published>
    <updated>2019-08-12T07:04:28.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h2><p>“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是应用到视频。</p><p>网上的很多教程没有原理讲解，所以也许可以照猫画虎，但没有总体的理解，就很难有自己的改进方法，希望本四次的分享对你有帮助。</p><hr><h3 id="第四部分-视频"><a href="#第四部分-视频" class="headerlink" title="第四部分 视频"></a>第四部分 视频</h3><p>视频不过是一张一张的图片，在上一篇的基础上，用 opencv 实现读取视频，即可完成换脸。但之前需要做一件视频，就是判断当前帧里面是否只有一个人，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_one_face</span><span class="params">(image)</span>:</span></span><br><span class="line">    <span class="comment"># dectetor 是人脸检测器</span></span><br><span class="line">    face_rect = detector(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> len(face_rect) == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>此外，我们新建 change_face_video() 函数来实现显示视频：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face_video</span><span class="params">(target_face_file, camera=<span class="number">0</span>)</span>:</span></span><br><span class="line">    cap = cv2.VideoCapture(camera)</span><br><span class="line">    target_face = cv2.imread(target_face_file)</span><br><span class="line">    <span class="comment"># 为了保存处理后的视频</span></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">'XVID'</span>)</span><br><span class="line">    out = cv2.VideoWriter(<span class="string">'output.avi'</span>,fourcc, <span class="number">20.0</span>, (<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cap.isOpened()):</span><br><span class="line">        hasFrame, frame = cap.read()</span><br><span class="line">        <span class="comment"># print(frame.shape, target_face.shape)</span></span><br><span class="line">        new_face = frame</span><br><span class="line">        <span class="keyword">if</span> hasFrame <span class="keyword">and</span> find_one_face(frame):</span><br><span class="line">            new_face = change_face(frame, target_face)</span><br><span class="line">        cv2.imshow(<span class="string">'new_face'</span>, new_face)</span><br><span class="line">        out.write(frame) <span class="comment"># 把帧写入视频</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cap.release()<span class="comment">#释放摄像头</span></span><br><span class="line">    cv2.destroyAllWindows()<span class="comment">#删除全部窗口</span></span><br></pre></td></tr></table></figure><p>里面需要调用 change_face() 函数，change_face() 也要做一些简单修改，修改后如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face</span><span class="params">(img1, img2)</span>:</span></span><br><span class="line">    boy = img1</span><br><span class="line">    girl = img2</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取变化矩阵， OVERLAY_POINTS 是上面定义的关键点下标</span></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks[OVERLAY_POINTS],</span><br><span class="line">        girl_landmarks[OVERLAY_POINTS]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先得到 boy 和 warped_girl 的掩模，再取两个掩模的白色部分的并集</span></span><br><span class="line">    <span class="comment"># 这样得到的掩模 combined_mask 就包含了两张脸所在的范围</span></span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    girl_mask = get_face_mask(girl, girl_landmarks)</span><br><span class="line">    warped_girl_mask = warp_image(girl_mask, trans_mat, boy.shape)</span><br><span class="line">    combined_mask = np.max([boy_mask, warped_girl_mask], axis=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了让整容的脸衔接更好，把掩模边缘进行高斯模糊一下，核大小可以自己试着取</span></span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">19</span>, <span class="number">19</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">13</span>, <span class="number">13</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">7</span>, <span class="number">7</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># warped_girl 是一张大小和 boy 一样大，并且脸对应的图片</span></span><br><span class="line">    warped_girl = warp_image(girl, trans_mat, boy.shape)</span><br><span class="line">    warped_girl_color_correct = color_correct(boy, warped_girl, boy_landmarks)</span><br><span class="line">    boy = boy.astype(np.float64)</span><br><span class="line">    warped_girl = warped_girl.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片相加， boy, girl 的像素点取值为 0~255，boy_mask像素点取值为 0或1</span></span><br><span class="line">    renyao = boy * (<span class="number">1</span> - combined_mask) + warped_girl_color_correct * combined_mask</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了正常显示，像素值应转换成整型</span></span><br><span class="line">    boy = boy.astype(np.uint8)</span><br><span class="line">    warped_girl = warped_girl.astype(np.uint8)</span><br><span class="line">    renyao = renyao.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> renyao</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    cv2.imshow('boy', boy)</span></span><br><span class="line"><span class="string">    cv2.imshow('warped_girl', warped_girl)</span></span><br><span class="line"><span class="string">    cv2.imshow('renyao', renyao)</span></span><br><span class="line"><span class="string">    cv2.waitKey(0)   </span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure><p>完整代码如下，命名成 changeface.py，运行 python3 changeface.py 即可打开摄像头，显示变脸后的图片，可以试试把自己变成二师兄^-^ ！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变脸完整程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测器和模型的路径</span></span><br><span class="line">predictor_path = <span class="string">r'./model/shape_predictor_68_face_landmarks.dat'</span></span><br><span class="line">face_rec_model_path = <span class="string">r'./model/dlib_face_recognition_resnet_model_v1.dat'</span></span><br><span class="line">faces_folder_path = <span class="string">r'./faces/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个人脸关键点预测器 predictor，全局变量</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line">predictor = dlib.shape_predictor(predictor_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 68个点，分别代表眼，口，鼻等关键点的位置，现在分开一下</span></span><br><span class="line">LEFT_EYE_POINTS = list(range(<span class="number">42</span>, <span class="number">48</span>))</span><br><span class="line">RIGHT_EYE_POINTS = list(range(<span class="number">36</span>, <span class="number">42</span>))</span><br><span class="line">LEFT_BROW_POINTS = list(range(<span class="number">22</span>, <span class="number">27</span>))</span><br><span class="line">RIGHT_BROW_POINTS = list(range(<span class="number">17</span>, <span class="number">22</span>))</span><br><span class="line">NOSE_POINTS = list(range(<span class="number">27</span>, <span class="number">35</span>))</span><br><span class="line">MOUTH_POINTS = list(range(<span class="number">48</span>, <span class="number">61</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们要用的确定人脸的关键点列表</span></span><br><span class="line">OVERLAY_POINTS = [</span><br><span class="line">    LEFT_EYE_POINTS + RIGHT_EYE_POINTS +</span><br><span class="line">        LEFT_BROW_POINTS + RIGHT_BROW_POINTS +</span><br><span class="line">        NOSE_POINTS + MOUTH_POINTS,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征数</span></span><br><span class="line">FEATHER_AMOUNT = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取脸部关键点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_landmark</span><span class="params">(image)</span>:</span></span><br><span class="line">    face_rect = detector(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> len(face_rect) != <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'No one face in one picture'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> np.matrix([[p.x, p.y] <span class="keyword">for</span> p <span class="keyword">in</span> predictor(image, face_rect[<span class="number">0</span>]).parts()])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_one_face</span><span class="params">(image)</span>:</span></span><br><span class="line">    face_rect = detector(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> len(face_rect) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用普氏分析调整脸部</span></span><br><span class="line"><span class="comment"># p1,p2分别是两张图的关键点landmarks列表</span></span><br><span class="line"><span class="comment"># 返回结果是从 p2 到 p1 的仿射变换矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformation_from_points</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">    p1 = p1.astype(np.float64)</span><br><span class="line">    p2 = p2.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    c1 = np.mean(p1, axis=<span class="number">0</span>)</span><br><span class="line">    c2 = np.mean(p2, axis=<span class="number">0</span>)</span><br><span class="line">    p1 -= c1</span><br><span class="line">    p2 -= c2</span><br><span class="line"></span><br><span class="line">    s1 = np.std(p1)</span><br><span class="line">    s2 = np.std(p2)</span><br><span class="line"></span><br><span class="line">    p1 /= s1</span><br><span class="line">    p2 /= s2</span><br><span class="line">    </span><br><span class="line">    U, S, Vt = np.linalg.svd(p1.T * p2)</span><br><span class="line">    R = (U * Vt).T </span><br><span class="line"></span><br><span class="line">    trans_mat = np.vstack([np.hstack(((s2 / s1)*R, c2.T-(s2/s1)*R*c1.T)), </span><br><span class="line">        np.matrix([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>])])</span><br><span class="line">    <span class="keyword">return</span> trans_mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 image 变成 dshape 大小，并用仿射矩阵 M 进行变化，这里的M就是上面的 trans_mat</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warp_image</span><span class="params">(image, M, dshape)</span>:</span></span><br><span class="line">    output_image = np.zeros(dshape, dtype=image.dtype)</span><br><span class="line">    cv2.warpAffine(image, M[:<span class="number">2</span>], (dshape[<span class="number">1</span>], dshape[<span class="number">0</span>]),</span><br><span class="line">        dst=output_image, flags=cv2.WARP_INVERSE_MAP, </span><br><span class="line">        borderMode=cv2.BORDER_TRANSPARENT)</span><br><span class="line">    <span class="keyword">return</span> output_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在img上绘制points点列表的凸包，Python参数默认引用，所以此处没用返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_convex_hull</span><span class="params">(img, points, color)</span>:</span></span><br><span class="line">    points = cv2.convexHull(points)</span><br><span class="line">    cv2.fillConvexPoly(img, points, color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取人脸掩模</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_face_mask</span><span class="params">(img, landmarks)</span>:</span></span><br><span class="line">    <span class="comment"># 用一张灰度的图片来绘制</span></span><br><span class="line">    img = np.zeros(img.shape[:<span class="number">2</span>], dtype=np.float64)</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> OVERLAY_POINTS:</span><br><span class="line">        draw_convex_hull(img, landmarks[group], color=<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># 之前的 img 是单通道的灰度图，所以下面有三个 img</span></span><br><span class="line">    img = np.array([img, img, img]).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据瞳距进行颜色校正，这是一个经验方法</span></span><br><span class="line">COLOUR_CORRECT_BLUR_FRAC = <span class="number">0.6</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_correct</span><span class="params">(im1, im2, landmarks1)</span>:</span></span><br><span class="line">    <span class="comment"># 根据左右眼之间的距离，乘以0.6，为高斯核的大小</span></span><br><span class="line">    blur_amount = COLOUR_CORRECT_BLUR_FRAC * np.linalg.norm(</span><br><span class="line">                              np.mean(landmarks1[LEFT_EYE_POINTS], axis=<span class="number">0</span>) -</span><br><span class="line">                              np.mean(landmarks1[RIGHT_EYE_POINTS], axis=<span class="number">0</span>))</span><br><span class="line">    blur_amount = int(blur_amount)</span><br><span class="line">    <span class="keyword">if</span> blur_amount % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        blur_amount += <span class="number">1</span></span><br><span class="line">    im1_blur = cv2.GaussianBlur(im1, (blur_amount, blur_amount), <span class="number">0</span>)</span><br><span class="line">    im2_blur = cv2.GaussianBlur(im2, (blur_amount, blur_amount), <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 避免后面除以0，设一个 im2_blur_2</span></span><br><span class="line">    im2_blur[im2_blur &lt; <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    im2 = im2.astype(np.float64)</span><br><span class="line">    im1_blur = im1_blur.astype(np.float64)</span><br><span class="line">    im2_blur = im2_blur.astype(np.float64)</span><br><span class="line">    <span class="comment"># 类似 A * B / A</span></span><br><span class="line">    im2_color_correct = im2 * im1_blur / im2_blur</span><br><span class="line">    im2_color_correct[im2_color_correct &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    im2_color_correct[im2_color_correct &gt; <span class="number">255</span>] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> im2_color_correct.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face</span><span class="params">(img1, img2)</span>:</span></span><br><span class="line">    boy = img1</span><br><span class="line">    girl = img2</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取变化矩阵， OVERLAY_POINTS 是上面定义的关键点下标</span></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks[OVERLAY_POINTS],</span><br><span class="line">        girl_landmarks[OVERLAY_POINTS]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先得到 boy 和 warped_girl 的掩模，再取两个掩模的白色部分的并集</span></span><br><span class="line">    <span class="comment"># 这样得到的掩模 combined_mask 就包含了两张脸所在的范围</span></span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    girl_mask = get_face_mask(girl, girl_landmarks)</span><br><span class="line">    warped_girl_mask = warp_image(girl_mask, trans_mat, boy.shape)</span><br><span class="line">    combined_mask = np.max([boy_mask, warped_girl_mask], axis=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了让整容的脸衔接更好，把掩模边缘进行高斯模糊一下，核大小可以自己试着取</span></span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">19</span>, <span class="number">19</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">13</span>, <span class="number">13</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">7</span>, <span class="number">7</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># warped_girl 是一张大小和 boy 一样大，并且脸对应的图片</span></span><br><span class="line">    warped_girl = warp_image(girl, trans_mat, boy.shape)</span><br><span class="line">    warped_girl_color_correct = color_correct(boy, warped_girl, boy_landmarks)</span><br><span class="line">    boy = boy.astype(np.float64)</span><br><span class="line">    warped_girl = warped_girl.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片相加， boy, girl 的像素点取值为 0~255，boy_mask像素点取值为 0或1</span></span><br><span class="line">    renyao = boy * (<span class="number">1</span> - combined_mask) + warped_girl_color_correct * combined_mask</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了正常显示，像素值应转换成整型</span></span><br><span class="line">    boy = boy.astype(np.uint8)</span><br><span class="line">    warped_girl = warped_girl.astype(np.uint8)</span><br><span class="line">    renyao = renyao.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> renyao</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    cv2.imshow('boy', boy)</span></span><br><span class="line"><span class="string">    cv2.imshow('warped_girl', warped_girl)</span></span><br><span class="line"><span class="string">    cv2.imshow('renyao', renyao)</span></span><br><span class="line"><span class="string">    cv2.waitKey(0)   </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face_video</span><span class="params">(target_face_file, camera=<span class="number">0</span>)</span>:</span></span><br><span class="line">    cap = cv2.VideoCapture(camera)</span><br><span class="line">    target_face = cv2.imread(target_face_file)</span><br><span class="line">    <span class="comment"># 为了保存处理后的视频</span></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">'XVID'</span>)</span><br><span class="line">    out = cv2.VideoWriter(<span class="string">'output.avi'</span>,fourcc, <span class="number">20.0</span>, (<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cap.isOpened()):</span><br><span class="line">        hasFrame, frame = cap.read()</span><br><span class="line">        <span class="comment"># print(frame.shape, target_face.shape)</span></span><br><span class="line">        new_face = frame</span><br><span class="line">        <span class="keyword">if</span> hasFrame <span class="keyword">and</span> find_one_face(frame):</span><br><span class="line">            new_face = change_face(frame, target_face)</span><br><span class="line">        cv2.imshow(<span class="string">'new_face'</span>, new_face)</span><br><span class="line">        out.write(frame) <span class="comment"># 把帧写入视频</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cap.release()<span class="comment">#释放摄像头</span></span><br><span class="line">    cv2.destroyAllWindows()<span class="comment">#删除全部窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 faces/girl.jpeg 换成你想要变到的脸的图片</span></span><br><span class="line">change_face_video(<span class="string">'faces/girl.jpeg'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总序&quot;&gt;&lt;a href=&quot;#总序&quot; class=&quot;headerlink&quot; title=&quot;总序&quot;&gt;&lt;/a&gt;总序&lt;/h2&gt;&lt;p&gt;“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是
      
    
    </summary>
    
    
      <category term="entertainment study" scheme="http://yoursite.com/tags/entertainment-study/"/>
    
  </entry>
  
  <entry>
    <title>变脸 (3) --- 改进</title>
    <link href="http://yoursite.com/2019/08/12/changeFace-3/"/>
    <id>http://yoursite.com/2019/08/12/changeFace-3/</id>
    <published>2019-08-12T01:33:59.000Z</published>
    <updated>2019-08-12T06:39:12.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h2><p>“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是应用到视频。</p><p>网上的很多教程没有原理讲解，所以也许可以照猫画虎，但没有总体的理解，就很难有自己的改进方法，希望本四次的分享对你有帮助。</p><hr><h3 id="第三部分-改进"><a href="#第三部分-改进" class="headerlink" title="第三部分 改进"></a>第三部分 改进</h3><p>在上一节，我们完成了变脸，但变脸后的效果很生硬，下面做一些改进！具体工作有两个方向：</p><ul><li><p>调整掩模大小</p></li><li><p>调整颜色和亮度，让目标脸和原脸颜色一致</p></li><li><p>调整脸部衔接处的边缘，让其过渡自然</p></li></ul><h4 id="调整掩模大小"><a href="#调整掩模大小" class="headerlink" title="调整掩模大小"></a>调整掩模大小</h4><p>我们要把图甲的人脸换成图乙中的人脸，之前已经变换图乙，让其图片中人脸和图甲中差不多（把变换后的图乙记作图丙）。图丙的人脸大小基本和图甲的一致，但两者还是会有偏差。那么我们可以分别得出图甲和图丙中人脸的掩模，取两个掩模的并集，效果如下：</p><p><img src="/images/combined_mask.jpg" alt></p><p>上图最右面一张掩模白色部分是前两张掩模白色部分的并集。</p><h4 id="图片亮度调整"><a href="#图片亮度调整" class="headerlink" title="图片亮度调整"></a>图片亮度调整</h4><p>如果直接把脸分割，其效果如下：</p><p><img src="/images/unnatural_face.png" alt></p><p>两张脸肤色明显不同，一看就是造造假的。</p><p>下面进行改进，这里用到了高斯模糊，先模糊再去模糊，就得到肤色类似的图像，确实有几分神奇。比如第一张图的模糊效果如下，左边是原图，右边是模糊后的图：</p><p><img src="/images/boy_blur.png" alt></p><p>下面是变换的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据瞳距进行颜色校正，这是一个经验方法</span></span><br><span class="line">COLOUR_CORRECT_BLUR_FRAC = <span class="number">0.6</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_correct</span><span class="params">(im1, im2, landmarks1)</span>:</span></span><br><span class="line">    <span class="comment"># 根据左右眼之间的距离，乘以0.6，为高斯核的大小</span></span><br><span class="line">    blur_amount = COLOUR_CORRECT_BLUR_FRAC * np.linalg.norm(</span><br><span class="line">                              np.mean(landmarks1[LEFT_EYE_POINTS], axis=<span class="number">0</span>) -</span><br><span class="line">                              np.mean(landmarks1[RIGHT_EYE_POINTS], axis=<span class="number">0</span>))</span><br><span class="line">    blur_amount = int(blur_amount)</span><br><span class="line">    <span class="keyword">if</span> blur_amount % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        blur_amount += <span class="number">1</span></span><br><span class="line">    im1_blur = cv2.GaussianBlur(im1, (blur_amount, blur_amount), <span class="number">0</span>)</span><br><span class="line">    im2_blur = cv2.GaussianBlur(im2, (blur_amount, blur_amount), <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 避免后面除以0，设一个 im2_blur_2</span></span><br><span class="line">    im2_blur[im2_blur &lt; <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    im2 = im2.astype(np.float64)</span><br><span class="line">    im1_blur = im2.astype(np.float64)</span><br><span class="line">    im2_blur = im2_blur.astype(np.float64)</span><br><span class="line">    <span class="comment"># 类似 A * B / A</span></span><br><span class="line">    im2_color_correct = im2 * im1_blur / im2_blur</span><br><span class="line">    im2_color_correct[im2_color_correct &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    im2_color_correct[im2_color_correct &gt; <span class="number">255</span>] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> im2_color_correct.astype(np.uint8)</span><br></pre></td></tr></table></figure><p>上面的这个函数可以把图丙的脸的亮度变成我们需要的亮度，效果如下，最右面一张是亮度校准后的图片，希望的是和左面的boy的脸亮度一致，小姑娘的脸果然变黑了：</p><p><img src="/images/color_correct.jpg" alt></p><p>以上就换脸差不多了，看一下效果：</p><p><img src="/images/renyao_1.png" alt></p><p>感觉还是有一丝丝的不和谐，头发被截下来，这个处理不了，不过脸的边缘可以再和谐一下。这可以通过把掩模用高斯核处理一下来完成，学了这么多，这个原因就不解释了，还不懂就说明没认真思考。</p><p>最终 change_face() 函数的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face</span><span class="params">(img1, img2)</span>:</span></span><br><span class="line">    boy = cv2.imread(img1)</span><br><span class="line">    girl = cv2.imread(img2)</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取变化矩阵， OVERLAY_POINTS 是上面定义的关键点下标</span></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks[OVERLAY_POINTS],</span><br><span class="line">        girl_landmarks[OVERLAY_POINTS]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先得到 boy 和 warped_girl 的掩模，再取两个掩模的白色部分的并集</span></span><br><span class="line">    <span class="comment"># 这样得到的掩模 combined_mask 就包含了两张脸所在的范围</span></span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    girl_mask = get_face_mask(girl, girl_landmarks)</span><br><span class="line">    warped_girl_mask = warp_image(girl_mask, trans_mat, boy.shape)</span><br><span class="line">    combined_mask = np.max([boy_mask, warped_girl_mask], axis=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了让整容的脸衔接更好，把掩模边缘进行高斯模糊一下，核大小可以自己试着取</span></span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">19</span>, <span class="number">19</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">13</span>, <span class="number">13</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">7</span>, <span class="number">7</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># warped_girl 是一张大小和 boy 一样大，并且脸对应的图片</span></span><br><span class="line">    warped_girl = warp_image(girl, trans_mat, boy.shape)</span><br><span class="line">    warped_girl_color_correct = color_correct(boy, warped_girl, boy_landmarks)</span><br><span class="line">    boy = boy.astype(np.float64)</span><br><span class="line">    warped_girl = warped_girl.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片相加， boy, girl 的像素点取值为 0~255，boy_mask像素点取值为 0或1</span></span><br><span class="line">    renyao = boy * (<span class="number">1</span> - combined_mask) + warped_girl_color_correct * combined_mask</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了正常显示，像素值应转换成整型</span></span><br><span class="line">    boy = boy.astype(np.uint8)</span><br><span class="line">    warped_girl = warped_girl.astype(np.uint8)</span><br><span class="line">    renyao = renyao.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'boy'</span>, boy)</span><br><span class="line">    cv2.imshow(<span class="string">'warped_girl'</span>, warped_girl)</span><br><span class="line">    cv2.imshow(<span class="string">'renyao'</span>, renyao)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">change_face(<span class="string">'faces/boy.jpeg'</span>, <span class="string">'faces/girl.jpeg'</span>)</span><br></pre></td></tr></table></figure><p>效果如下，因为有头发原因，上不不是很好，但脸部基本可以：</p><p><img src="/images/renyao.png" alt="1565590765647"></p><p>下面还有一个猴哥和八戒的变换：</p><p><img src="/images/wkbj.png" alt></p><p>把大师兄试着换成自己头像吧，enjoy it!</p><p>完整代码如下，除了增加 color_correct() 函数已经改动一下 change_face()外，其他函数和第（2）部分的一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os, glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测器和模型的路径</span></span><br><span class="line">predictor_path = <span class="string">r'./model/shape_predictor_68_face_landmarks.dat'</span></span><br><span class="line">face_rec_model_path = <span class="string">r'./model/dlib_face_recognition_resnet_model_v1.dat'</span></span><br><span class="line">faces_folder_path = <span class="string">r'./faces/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个人脸关键点预测器 predictor，全局变量</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line">predictor = dlib.shape_predictor(predictor_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 68个点，分别代表眼，口，鼻等关键点的位置，现在分开一下</span></span><br><span class="line">LEFT_EYE_POINTS = list(range(<span class="number">42</span>, <span class="number">48</span>))</span><br><span class="line">RIGHT_EYE_POINTS = list(range(<span class="number">36</span>, <span class="number">42</span>))</span><br><span class="line">LEFT_BROW_POINTS = list(range(<span class="number">22</span>, <span class="number">27</span>))</span><br><span class="line">RIGHT_BROW_POINTS = list(range(<span class="number">17</span>, <span class="number">22</span>))</span><br><span class="line">NOSE_POINTS = list(range(<span class="number">27</span>, <span class="number">35</span>))</span><br><span class="line">MOUTH_POINTS = list(range(<span class="number">48</span>, <span class="number">61</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们要用的确定人脸的关键点列表</span></span><br><span class="line">OVERLAY_POINTS = [</span><br><span class="line">    LEFT_EYE_POINTS + RIGHT_EYE_POINTS +</span><br><span class="line">        LEFT_BROW_POINTS + RIGHT_BROW_POINTS +</span><br><span class="line">        NOSE_POINTS + MOUTH_POINTS,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征数</span></span><br><span class="line">FEATHER_AMOUNT = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取脸部关键点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_landmark</span><span class="params">(image)</span>:</span></span><br><span class="line">    face_rect = detector(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> len(face_rect) != <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'No one face in one picture'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> np.matrix([[p.x, p.y] <span class="keyword">for</span> p <span class="keyword">in</span> predictor(image, face_rect[<span class="number">0</span>]).parts()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用普氏分析调整脸部</span></span><br><span class="line"><span class="comment"># p1,p2分别是两张图的关键点landmarks列表</span></span><br><span class="line"><span class="comment"># 返回结果是从 p2 到 p1 的仿射变换矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformation_from_points</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">    p1 = p1.astype(np.float64)</span><br><span class="line">    p2 = p2.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    c1 = np.mean(p1, axis=<span class="number">0</span>)</span><br><span class="line">    c2 = np.mean(p2, axis=<span class="number">0</span>)</span><br><span class="line">    p1 -= c1</span><br><span class="line">    p2 -= c2</span><br><span class="line"></span><br><span class="line">    s1 = np.std(p1)</span><br><span class="line">    s2 = np.std(p2)</span><br><span class="line"></span><br><span class="line">    p1 /= s1</span><br><span class="line">    p2 /= s2</span><br><span class="line">    </span><br><span class="line">    U, S, Vt = np.linalg.svd(p1.T * p2)</span><br><span class="line">    R = (U * Vt).T </span><br><span class="line"></span><br><span class="line">    trans_mat = np.vstack([np.hstack(((s2 / s1)*R, c2.T-(s2/s1)*R*c1.T)), </span><br><span class="line">        np.matrix([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>])])</span><br><span class="line">    <span class="keyword">return</span> trans_mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 image 变成 dshape 大小，并用仿射矩阵 M 进行变化，这里的M就是上面的 trans_mat</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warp_image</span><span class="params">(image, M, dshape)</span>:</span></span><br><span class="line">    output_image = np.zeros(dshape, dtype=image.dtype)</span><br><span class="line">    cv2.warpAffine(image, M[:<span class="number">2</span>], (dshape[<span class="number">1</span>], dshape[<span class="number">0</span>]),</span><br><span class="line">        dst=output_image, flags=cv2.WARP_INVERSE_MAP, </span><br><span class="line">        borderMode=cv2.BORDER_TRANSPARENT)</span><br><span class="line">    <span class="keyword">return</span> output_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在img上绘制points点列表的凸包，Python参数默认引用，所以此处没用返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_convex_hull</span><span class="params">(img, points, color)</span>:</span></span><br><span class="line">    points = cv2.convexHull(points)</span><br><span class="line">    cv2.fillConvexPoly(img, points, color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取人脸掩模</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_face_mask</span><span class="params">(img, landmarks)</span>:</span></span><br><span class="line">    <span class="comment"># 用一张灰度的图片来绘制</span></span><br><span class="line">    img = np.zeros(img.shape[:<span class="number">2</span>], dtype=np.float64)</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> OVERLAY_POINTS:</span><br><span class="line">        draw_convex_hull(img, landmarks[group], color=<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># 之前的 img 是单通道的灰度图，所以下面有三个 img</span></span><br><span class="line">    img = np.array([img, img, img]).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment"># Amount of blur to use during colour correction, as a fraction of the</span></span><br><span class="line"><span class="comment"># pupillary distance.  (pupillary:瞳距)</span></span><br><span class="line"><span class="comment"># 根据瞳距进行颜色校正，这是一个经验方法</span></span><br><span class="line">COLOUR_CORRECT_BLUR_FRAC = <span class="number">0.6</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_correct</span><span class="params">(im1, im2, landmarks1)</span>:</span></span><br><span class="line">    <span class="comment"># 根据左右眼之间的距离，乘以0.6，为高斯核的大小</span></span><br><span class="line">    blur_amount = COLOUR_CORRECT_BLUR_FRAC * np.linalg.norm(</span><br><span class="line">                              np.mean(landmarks1[LEFT_EYE_POINTS], axis=<span class="number">0</span>) -</span><br><span class="line">                              np.mean(landmarks1[RIGHT_EYE_POINTS], axis=<span class="number">0</span>))</span><br><span class="line">    blur_amount = int(blur_amount)</span><br><span class="line">    <span class="keyword">if</span> blur_amount % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        blur_amount += <span class="number">1</span></span><br><span class="line">    im1_blur = cv2.GaussianBlur(im1, (blur_amount, blur_amount), <span class="number">0</span>)</span><br><span class="line">    im2_blur = cv2.GaussianBlur(im2, (blur_amount, blur_amount), <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 避免后面除以0，设一个 im2_blur_2</span></span><br><span class="line">    im2_blur[im2_blur &lt; <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    im2 = im2.astype(np.float64)</span><br><span class="line">    im1_blur = im1_blur.astype(np.float64)</span><br><span class="line">    im2_blur = im2_blur.astype(np.float64)</span><br><span class="line">    <span class="comment"># 类似 A * B / A</span></span><br><span class="line">    im2_color_correct = im2 * im1_blur / im2_blur</span><br><span class="line">    im2_color_correct[im2_color_correct &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    im2_color_correct[im2_color_correct &gt; <span class="number">255</span>] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> im2_color_correct.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face</span><span class="params">(img1, img2)</span>:</span></span><br><span class="line">    boy = cv2.imread(img1)</span><br><span class="line">    girl = cv2.imread(img2)</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取变化矩阵， OVERLAY_POINTS 是上面定义的关键点下标</span></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks[OVERLAY_POINTS],</span><br><span class="line">        girl_landmarks[OVERLAY_POINTS]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先得到 boy 和 warped_girl 的掩模，再取两个掩模的白色部分的并集</span></span><br><span class="line">    <span class="comment"># 这样得到的掩模 combined_mask 就包含了两张脸所在的范围</span></span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    girl_mask = get_face_mask(girl, girl_landmarks)</span><br><span class="line">    warped_girl_mask = warp_image(girl_mask, trans_mat, boy.shape)</span><br><span class="line">    combined_mask = np.max([boy_mask, warped_girl_mask], axis=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了让整容的脸衔接更好，把掩模边缘进行高斯模糊一下，核大小可以自己试着取</span></span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">19</span>, <span class="number">19</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">13</span>, <span class="number">13</span>), <span class="number">0</span>)</span><br><span class="line">    combined_mask = cv2.GaussianBlur(combined_mask, (<span class="number">7</span>, <span class="number">7</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># warped_girl 是一张大小和 boy 一样大，并且脸对应的图片</span></span><br><span class="line">    warped_girl = warp_image(girl, trans_mat, boy.shape)</span><br><span class="line">    warped_girl_color_correct = color_correct(boy, warped_girl, boy_landmarks)</span><br><span class="line">    boy = boy.astype(np.float64)</span><br><span class="line">    warped_girl = warped_girl.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片相加， boy, girl 的像素点取值为 0~255，boy_mask像素点取值为 0或1</span></span><br><span class="line">    renyao = boy * (<span class="number">1</span> - combined_mask) + warped_girl_color_correct * combined_mask</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了正常显示，像素值应转换成整型</span></span><br><span class="line">    boy = boy.astype(np.uint8)</span><br><span class="line">    warped_girl = warped_girl.astype(np.uint8)</span><br><span class="line">    renyao = renyao.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'Wukong Sun'</span>, boy)</span><br><span class="line">    cv2.imshow(<span class="string">'Bajie Zhu'</span>, warped_girl)</span><br><span class="line">    cv2.imshow(<span class="string">'Who are you?'</span>, renyao)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">change_face(<span class="string">'faces/swk.jpeg'</span>, <span class="string">'faces/zbj_2.jpeg'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总序&quot;&gt;&lt;a href=&quot;#总序&quot; class=&quot;headerlink&quot; title=&quot;总序&quot;&gt;&lt;/a&gt;总序&lt;/h2&gt;&lt;p&gt;“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是
      
    
    </summary>
    
    
      <category term="entertainment study" scheme="http://yoursite.com/tags/entertainment-study/"/>
    
  </entry>
  
  <entry>
    <title>变脸 (2) --- 实现</title>
    <link href="http://yoursite.com/2019/08/06/changeFace-2/"/>
    <id>http://yoursite.com/2019/08/06/changeFace-2/</id>
    <published>2019-08-06T06:49:21.000Z</published>
    <updated>2019-08-12T12:54:56.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h2><p>“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是应用到视频。</p><p>网上的很多教程没有原理讲解，所以也许可以照猫画虎，但没有总体的理解，就很难有自己的改进方法，希望本四次的分享对你有帮助。</p><hr><h2 id="第二部分-Python3实现"><a href="#第二部分-Python3实现" class="headerlink" title="第二部分 Python3实现"></a>第二部分 Python3实现</h2><p>在第一部分中，我们提到，换脸主要包括以下步骤：</p><h5 id="1-确定人脸位置"><a href="#1-确定人脸位置" class="headerlink" title="1. 确定人脸位置"></a>1. 确定人脸位置</h5><h5 id="2-把图乙的人脸大小和方向调节得和图甲中的差不多"><a href="#2-把图乙的人脸大小和方向调节得和图甲中的差不多" class="headerlink" title="2. 把图乙的人脸大小和方向调节得和图甲中的差不多"></a>2. 把图乙的人脸大小和方向调节得和图甲中的差不多</h5><h5 id="3-挖掉图甲中原来的人脸，换成图乙中的人脸"><a href="#3-挖掉图甲中原来的人脸，换成图乙中的人脸" class="headerlink" title="3. 挖掉图甲中原来的人脸，换成图乙中的人脸"></a>3. 挖掉图甲中原来的人脸，换成图乙中的人脸</h5><p>下面我们依次来实现。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>Python包准备</li></ul><p>​     我使用的是Ubuntu系统，Windows类似，用到的Python3 的主要有 $dlib$, $opencv$ 和$numpy$，请自行安装。 导入包代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure><ul><li><p>文件夹</p><p>本项目的文件夹如下，face 是根目录，下面有个 changeFace.py ，写代码，与 changeFace.py 同级建两个文件夹，一个 model/ ，用来放模型，一个 faces/ ，用来放图片。</p><ul><li>face/<ul><li>changeFace.py</li><li>model/</li><li>faces/</li></ul></li></ul></li><li><p>dlib 训练结果下载</p></li></ul><p>对于确定人脸的关键点，已经有训练好的模型，<a href="http://dlib.net/files/" target="_blank" rel="noopener">官网下载</a> shape_predictor_68_face_landmarks.dat 和 dlib_face_recognition_resnet_model_v1.dat 文件。放在上一步说的 model/ 文件夹下。</p><ul><li>图片准备</li></ul><p>随便找两张只有一个人的正脸的图片，图片大小可以不一样，最好一男一女，这样换脸后也比较明显。分别命名成 boy.jpeg 和 girl.jpeg。我们的目标给男孩子换上女孩的脸^-^。</p><p><img src="/images/boy_girl.jpg" alt></p><h3 id="使用dlib预测器"><a href="#使用dlib预测器" class="headerlink" title="使用dlib预测器"></a>使用dlib预测器</h3><p>下面使用dlib预测器，做一些初始化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os, glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测器和模型的路径</span></span><br><span class="line">predictor_path = <span class="string">r'./model/shape_predictor_68_face_landmarks.dat'</span></span><br><span class="line">face_rec_model_path = <span class="string">r'./model/dlib_face_recognition_resnet_model_v1.dat'</span></span><br><span class="line">faces_folder_path = <span class="string">r'./faces/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个人脸关键点预测器 predictor，全局变量</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line">predictor = dlib.shape_predictor(predictor_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 68个点，分别代表眼，口，鼻等关键点的位置，现在分开一下</span></span><br><span class="line">LEFT_EYE_POINTS = list(range(<span class="number">42</span>, <span class="number">48</span>))</span><br><span class="line">RIGHT_EYE_POINTS = list(range(<span class="number">36</span>, <span class="number">42</span>))</span><br><span class="line">LEFT_BROW_POINTS = list(range(<span class="number">22</span>, <span class="number">27</span>))</span><br><span class="line">RIGHT_BROW_POINTS = list(range(<span class="number">17</span>, <span class="number">22</span>))</span><br><span class="line">NOSE_POINTS = list(range(<span class="number">27</span>, <span class="number">35</span>))</span><br><span class="line">MOUTH_POINTS = list(range(<span class="number">48</span>, <span class="number">61</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们要用的确定人脸的关键点列表</span></span><br><span class="line">OVERLAY_POINTS = [</span><br><span class="line">    LEFT_EYE_POINTS + RIGHT_EYE_POINTS +</span><br><span class="line">        LEFT_BROW_POINTS + RIGHT_BROW_POINTS +</span><br><span class="line">        NOSE_POINTS + MOUTH_POINTS,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征数</span></span><br><span class="line">FEATHER_AMOUNT = <span class="number">11</span></span><br></pre></td></tr></table></figure><h3 id="获取脸部关键点"><a href="#获取脸部关键点" class="headerlink" title="获取脸部关键点"></a>获取脸部关键点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取脸部关键点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_landmark</span><span class="params">(image)</span>:</span></span><br><span class="line">    face_rect = detector(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> len(face_rect) != <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'No one face in one picture'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> np.matrix([[p.x, p.y] <span class="keyword">for</span> p <span class="keyword">in</span> predictor(image, face_rect[<span class="number">0</span>]).parts()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 get_landmark(img) 是否正常， 可不写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_landmark</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> glob.glob(os.path.join(faces_folder_path, <span class="string">"*.jpeg"</span>)):</span><br><span class="line">        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">        landmarks = get_landmark(img)</span><br><span class="line">        print(landmarks)</span><br></pre></td></tr></table></figure><p>运行 test_get_landmark()， 可以看见输出一些两列的矩阵，每行代表一个点。</p><h3 id="人脸对齐"><a href="#人脸对齐" class="headerlink" title="人脸对齐"></a>人脸对齐</h3><p>两张图片上的脸的大小和方向很可能是不同的，要换脸，那把脸变得差不多大是必须的。这个过程使用 Procrustes analysis（普氏分析），具体细节可以参考<a href="https://blog.csdn.net/wfei101/article/details/80530867" target="_blank" rel="noopener">这里</a> 。其实主要也是通过平移、旋转等仿射变化实现。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用普氏分析调整脸部</span></span><br><span class="line"><span class="comment"># p1,p2分别是两张图的关键点landmarks列表</span></span><br><span class="line"><span class="comment"># 返回结果是从 p2 到 p1 的仿射变换矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformation_from_points</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">    p1 = p1.astype(np.float64)</span><br><span class="line">    p2 = p2.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    c1 = np.mean(p1, axis=<span class="number">0</span>)</span><br><span class="line">    c2 = np.mean(p2, axis=<span class="number">0</span>)</span><br><span class="line">    p1 -= c1</span><br><span class="line">    p2 -= c2</span><br><span class="line"></span><br><span class="line">    s1 = np.std(p1)</span><br><span class="line">    s2 = np.std(p2)</span><br><span class="line"></span><br><span class="line">    p1 /= s1</span><br><span class="line">    p2 /= s2</span><br><span class="line">    </span><br><span class="line">    U, S, Vt = np.linalg.svd(p1.T * p2)</span><br><span class="line">    R = (U * Vt).T </span><br><span class="line"></span><br><span class="line">    trans_mat = np.vstack([np.hstack(((s2 / s1)*R, c2.T-(s2/s1)*R*c1.T)), </span><br><span class="line">        np.matrix([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>])])</span><br><span class="line">    <span class="keyword">return</span> trans_mat</span><br></pre></td></tr></table></figure><p>下面具体利用上面的仿射变化函数 trans_mat 及图片大小，进行变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 image 变成 dshape 大小，并用仿射矩阵 M 进行变化，这里的M就是上面的 trans_mat</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warp_image</span><span class="params">(image, M, dshape)</span>:</span></span><br><span class="line">    output_image = np.zeros(dshape, dtype=image.dtype)</span><br><span class="line">    cv2.warpAffine(image, M[:<span class="number">2</span>], (dshape[<span class="number">1</span>], dshape[<span class="number">0</span>]),</span><br><span class="line">        dst=output_image, flags=cv2.WARP_INVERSE_MAP, </span><br><span class="line">        borderMode=cv2.BORDER_TRANSPARENT)</span><br><span class="line">    <span class="keyword">return</span> output_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数，可不写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_wrap_image</span><span class="params">()</span>:</span></span><br><span class="line">    boy = cv2.imread(<span class="string">r'./faces/boy.jpeg'</span>)</span><br><span class="line">    girl = cv2.imread(<span class="string">r'./faces/girl.jpeg'</span>)</span><br><span class="line">    cv2.imshow(<span class="string">"boy"</span>, boy)</span><br><span class="line">    cv2.imshow(<span class="string">"girl_2"</span>, girl)</span><br><span class="line"></span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks, girl_landmarks)</span><br><span class="line">    output_image = wrap_image(girl, trans_mat, dshape=boy.shape)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">"result"</span>, output_image)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>运行 test_wrap_image()， 效果如下：</p><p><img src="/images/trans_mat.png" alt></p><p>多余的背景是我的桌面，上面是截图。最右面一张是变化后的效果，可以看其脸型大小和图片尺寸都和 boy 大小差不多了。</p><h3 id="获取人脸掩模"><a href="#获取人脸掩模" class="headerlink" title="获取人脸掩模"></a>获取人脸掩模</h3><p>先用 boy 的脸来做实验，其实脸主要看眼睛、鼻子和嘴巴的位置，我就要这几个关键部位。那先找出脸的形状，这个用 opencv 的凸包函数 convexHull() 来实现。</p><p><img src="/images/boy_mask.png" alt></p><p>右图就是左图脸的掩模。代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在img上绘制points点列表的凸包，Python参数默认引用，所以此处没用返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_convex_hull</span><span class="params">(img, points, color)</span>:</span></span><br><span class="line">    points = cv2.convexHull(points)</span><br><span class="line">    cv2.fillConvexPoly(img, points, color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取人脸掩模</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_face_mask</span><span class="params">(img, landmarks)</span>:</span></span><br><span class="line">    <span class="comment"># 用一张灰度的图片来绘制</span></span><br><span class="line">    img = np.zeros(img.shape[:<span class="number">2</span>], dtype=np.float64)</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> OVERLAY_POINTS:</span><br><span class="line">        draw_convex_hull(img, landmarks[group], color=<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># 之前的 img 是单通道的灰度图，所以下面有三个 img</span></span><br><span class="line">    img = np.array([img, img, img]).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数， 可不写。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_face_mask</span><span class="params">()</span>:</span></span><br><span class="line">    boy = cv2.imread(<span class="string">r'./faces/boy.jpeg'</span>)</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    cv2.imshow(<span class="string">"boy"</span>, boy)</span><br><span class="line">    cv2.imshow(<span class="string">"boy_mask"</span>, boy_mask)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>运行 test_get_face_mask()， 效果如上。</p><h3 id="换脸"><a href="#换脸" class="headerlink" title="换脸"></a>换脸</h3><p>到上面，基本工作完成了，那就来看看怎么让 boy 有 girl 的脸。下面依次实现</p><ul><li>把 girl 的脸变成和 boy 一样大小；</li><li>拿到 girl 的脸和 boy 去掉脸的剩下部分，这步用掩模辅助实现。其实这里只有一个掩模，因为两张脸认为一样大，这样两张脸可以无缝连接；</li><li>用矩阵加法和对应元素相乘的方法实现换脸，因为图片颜色为 0<del>255，这里要变成0</del>1。</li></ul><p>下面是代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face</span><span class="params">()</span>:</span></span><br><span class="line">    boy = cv2.imread(<span class="string">'faces/boy.jpeg'</span>)</span><br><span class="line">    girl = cv2.imread(<span class="string">'faces/girl.jpeg'</span>)</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取变化矩阵， OVERLAY_POINTS 是上面定义的关键点下标</span></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks[OVERLAY_POINTS],</span><br><span class="line">        girl_landmarks[OVERLAY_POINTS]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 掩模就用 boy_mask就好</span></span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    <span class="comment"># warped_girl 是一张大小和 boy 一样大，并且脸对应的图片</span></span><br><span class="line">    warped_girl = warp_image(girl, trans_mat, boy.shape)</span><br><span class="line">    </span><br><span class="line">    boy = boy.astype(np.float64)</span><br><span class="line">    warped_girl = warped_girl.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片相加， boy, girl 的像素点取值为 0~255，boy_mask像素点取值为 0或1</span></span><br><span class="line">    renyao = boy * (<span class="number">1</span> - boy_mask) + warped_girl * boy_mask</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了正常显示，像素值应转换成整型</span></span><br><span class="line">    boy = boy.astype(np.uint8)</span><br><span class="line">    warped_girl = warped_girl.astype(np.uint8)</span><br><span class="line">    renyao = renyao.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'boy'</span>, boy)</span><br><span class="line">    cv2.imshow(<span class="string">'warped_girl'</span>, warped_girl)</span><br><span class="line">    cv2.imshow(<span class="string">'renyao'</span>, renyao)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>运行 change_face()， 即可看见拭目以待的效果！如下，好看不？</p><p><img src="/images/change_face.png" alt></p><p>从左到右依次为原始boy，调整脸和图片大小后的 girl，换脸后的boy（人妖）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是换脸Python实现的全部内容了，可以看出换脸后及其不自然，下面一节来完善一下。汇总一下看到最终效果的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os, glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> dlib</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测器和模型的路径</span></span><br><span class="line">predictor_path = <span class="string">r'./model/shape_predictor_68_face_landmarks.dat'</span></span><br><span class="line">face_rec_model_path = <span class="string">r'./model/dlib_face_recognition_resnet_model_v1.dat'</span></span><br><span class="line">faces_folder_path = <span class="string">r'./faces/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个人脸关键点预测器 predictor，全局变量</span></span><br><span class="line">detector = dlib.get_frontal_face_detector()</span><br><span class="line">predictor = dlib.shape_predictor(predictor_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 68个点，分别代表眼，口，鼻等关键点的位置，现在分开一下</span></span><br><span class="line">LEFT_EYE_POINTS = list(range(<span class="number">42</span>, <span class="number">48</span>))</span><br><span class="line">RIGHT_EYE_POINTS = list(range(<span class="number">36</span>, <span class="number">42</span>))</span><br><span class="line">LEFT_BROW_POINTS = list(range(<span class="number">22</span>, <span class="number">27</span>))</span><br><span class="line">RIGHT_BROW_POINTS = list(range(<span class="number">17</span>, <span class="number">22</span>))</span><br><span class="line">NOSE_POINTS = list(range(<span class="number">27</span>, <span class="number">35</span>))</span><br><span class="line">MOUTH_POINTS = list(range(<span class="number">48</span>, <span class="number">61</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们要用的确定人脸的关键点列表</span></span><br><span class="line">OVERLAY_POINTS = [</span><br><span class="line">    LEFT_EYE_POINTS + RIGHT_EYE_POINTS +</span><br><span class="line">        LEFT_BROW_POINTS + RIGHT_BROW_POINTS +</span><br><span class="line">        NOSE_POINTS + MOUTH_POINTS,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征数</span></span><br><span class="line">FEATHER_AMOUNT = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取脸部关键点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_landmark</span><span class="params">(image)</span>:</span></span><br><span class="line">    face_rect = detector(image, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> len(face_rect) != <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'No one face in one picture'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> np.matrix([[p.x, p.y] <span class="keyword">for</span> p <span class="keyword">in</span> predictor(image, face_rect[<span class="number">0</span>]).parts()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用普氏分析调整脸部</span></span><br><span class="line"><span class="comment"># p1,p2分别是两张图的关键点landmarks列表</span></span><br><span class="line"><span class="comment"># 返回结果是从 p2 到 p1 的仿射变换矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformation_from_points</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">    p1 = p1.astype(np.float64)</span><br><span class="line">    p2 = p2.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    c1 = np.mean(p1, axis=<span class="number">0</span>)</span><br><span class="line">    c2 = np.mean(p2, axis=<span class="number">0</span>)</span><br><span class="line">    p1 -= c1</span><br><span class="line">    p2 -= c2</span><br><span class="line"></span><br><span class="line">    s1 = np.std(p1)</span><br><span class="line">    s2 = np.std(p2)</span><br><span class="line"></span><br><span class="line">    p1 /= s1</span><br><span class="line">    p2 /= s2</span><br><span class="line">    </span><br><span class="line">    U, S, Vt = np.linalg.svd(p1.T * p2)</span><br><span class="line">    R = (U * Vt).T </span><br><span class="line"></span><br><span class="line">    trans_mat = np.vstack([np.hstack(((s2 / s1)*R, c2.T-(s2/s1)*R*c1.T)), </span><br><span class="line">        np.matrix([<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>])])</span><br><span class="line">    <span class="keyword">return</span> trans_mat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 image 变成 dshape 大小，并用仿射矩阵 M 进行变化，这里的M就是上面的 trans_mat</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warp_image</span><span class="params">(image, M, dshape)</span>:</span></span><br><span class="line">    output_image = np.zeros(dshape, dtype=image.dtype)</span><br><span class="line">    cv2.warpAffine(image, M[:<span class="number">2</span>], (dshape[<span class="number">1</span>], dshape[<span class="number">0</span>]),</span><br><span class="line">        dst=output_image, flags=cv2.WARP_INVERSE_MAP, </span><br><span class="line">        borderMode=cv2.BORDER_TRANSPARENT)</span><br><span class="line">    <span class="keyword">return</span> output_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在img上绘制points点列表的凸包，Python参数默认引用，所以此处没用返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_convex_hull</span><span class="params">(img, points, color)</span>:</span></span><br><span class="line">    points = cv2.convexHull(points)</span><br><span class="line">    cv2.fillConvexPoly(img, points, color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取人脸掩模</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_face_mask</span><span class="params">(img, landmarks)</span>:</span></span><br><span class="line">    <span class="comment"># 用一张灰度的图片来绘制</span></span><br><span class="line">    img = np.zeros(img.shape[:<span class="number">2</span>], dtype=np.float64)</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> OVERLAY_POINTS:</span><br><span class="line">        draw_convex_hull(img, landmarks[group], color=<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># 之前的 img 是单通道的灰度图，所以下面有三个 img</span></span><br><span class="line">    img = np.array([img, img, img]).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_face</span><span class="params">()</span>:</span></span><br><span class="line">    boy = cv2.imread(<span class="string">'faces/boy.jpeg'</span>)</span><br><span class="line">    girl = cv2.imread(<span class="string">'faces/girl.jpeg'</span>)</span><br><span class="line">    boy_landmarks = get_landmark(boy)</span><br><span class="line">    girl_landmarks = get_landmark(girl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取变化矩阵， OVERLAY_POINTS 是上面定义的关键点下标</span></span><br><span class="line">    trans_mat = transformation_from_points(</span><br><span class="line">        boy_landmarks[OVERLAY_POINTS],</span><br><span class="line">        girl_landmarks[OVERLAY_POINTS]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 掩模就用 boy_mask就好</span></span><br><span class="line">    boy_mask = get_face_mask(boy, boy_landmarks)</span><br><span class="line">    <span class="comment"># warped_girl 是一张大小和 boy 一样大，并且脸对应的图片</span></span><br><span class="line">    warped_girl = warp_image(girl, trans_mat, boy.shape)</span><br><span class="line">    </span><br><span class="line">    boy = boy.astype(np.float64)</span><br><span class="line">    warped_girl = warped_girl.astype(np.float64)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片相加， boy, girl 的像素点取值为 0~255，boy_mask像素点取值为 0或1</span></span><br><span class="line">    renyao = boy * (<span class="number">1</span> - boy_mask) + warped_girl * boy_mask</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了正常显示，像素值应转换成整型</span></span><br><span class="line">    boy = boy.astype(np.uint8)</span><br><span class="line">    warped_girl = warped_girl.astype(np.uint8)</span><br><span class="line">    renyao = renyao.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'boy'</span>, boy)</span><br><span class="line">    cv2.imshow(<span class="string">'warped_girl'</span>, warped_girl)</span><br><span class="line">    cv2.imshow(<span class="string">'renyao'</span>, renyao)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">change_face()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总序&quot;&gt;&lt;a href=&quot;#总序&quot; class=&quot;headerlink&quot; title=&quot;总序&quot;&gt;&lt;/a&gt;总序&lt;/h2&gt;&lt;p&gt;“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是
      
    
    </summary>
    
    
      <category term="entertainment study" scheme="http://yoursite.com/tags/entertainment-study/"/>
    
  </entry>
  
  <entry>
    <title>变脸 (1) --- 原理</title>
    <link href="http://yoursite.com/2019/08/03/changeFace-1/"/>
    <id>http://yoursite.com/2019/08/03/changeFace-1/</id>
    <published>2019-08-03T02:35:25.000Z</published>
    <updated>2019-08-12T06:40:11.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h2><p>“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是应用到视频。</p><p>网上的很多教程没有原理讲解，所以也许可以照猫画虎，但没有总体的理解，就很难有自己的改进方法，希望本四次的分享对你有帮助。</p><hr><h2 id="第一部分-原理"><a href="#第一部分-原理" class="headerlink" title="第一部分 原理"></a>第一部分 原理</h2><p>换脸原理很简单，就是两个图，把第一张图（图甲）中的人脸换成第二张图（图乙）中的人脸。具体分成4步：</p><h5 id="1-确定人脸位置"><a href="#1-确定人脸位置" class="headerlink" title="1. 确定人脸位置"></a>1. 确定人脸位置</h5><h5 id="2-把图乙的人脸大小和方向调节得和图甲中的差不多"><a href="#2-把图乙的人脸大小和方向调节得和图甲中的差不多" class="headerlink" title="2. 把图乙的人脸大小和方向调节得和图甲中的差不多"></a>2. 把图乙的人脸大小和方向调节得和图甲中的差不多</h5><h5 id="3-挖掉图甲中原来的人脸，换成图乙中的人脸"><a href="#3-挖掉图甲中原来的人脸，换成图乙中的人脸" class="headerlink" title="3. 挖掉图甲中原来的人脸，换成图乙中的人脸"></a>3. 挖掉图甲中原来的人脸，换成图乙中的人脸</h5><p>当然，为了使人脸衔接更自然，会做一些简单的脸边缘的过渡，同时会做一些亮度、边缘模糊等调整。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>上面原理中的三个步骤，也是三个难题，其实很简单。我觉得没有必要从太细节上追究每一个点，但宏观上必须了解它大概是怎么进行的。</p><h5 id="1-确定人脸位置-1"><a href="#1-确定人脸位置-1" class="headerlink" title="1. 确定人脸位置"></a>1. 确定人脸位置</h5><p>为了确定人脸位置，有专门训练好的 dlib 库，它会找出人脸的特征点（中图），dlib 是一个训练好的模型，可以直接下载其参数。然后用 opencv 的凸包函数得到人脸形状（右图）。此处不是将整张人脸截下，而是将眼睛，口，鼻等关键部位截出来，当然自己也可以截出整张脸。如下图，左图是原始图片，中图是 dlib 检测人脸，右图是最终得到包含关键部位的人脸的形状。</p><p><img src="/images/get_landmarks.png" alt></p><center>图1 确定人脸位置</center>这样，图样的方法处理图乙，得到人脸位置。<h5 id="2-把图乙的人脸大小和方向调节得和图甲中的差不多-1"><a href="#2-把图乙的人脸大小和方向调节得和图甲中的差不多-1" class="headerlink" title="2. 把图乙的人脸大小和方向调节得和图甲中的差不多"></a>2. 把图乙的人脸大小和方向调节得和图甲中的差不多</h5><p>这个的实现主要用仿射变换，及一些图片的旋转、缩放、调整图片分辨率等方法，具体实现也比较麻烦，能从总体上知道那些函数功能这样就好。</p><h5 id="3-挖掉图甲中原来的人脸，换成图乙中的人脸-1"><a href="#3-挖掉图甲中原来的人脸，换成图乙中的人脸-1" class="headerlink" title="3. 挖掉图甲中原来的人脸，换成图乙中的人脸"></a>3. 挖掉图甲中原来的人脸，换成图乙中的人脸</h5><p>这个用掩模的方法，就像图1中的最右面一张图，我有另外一张图，大小和其一致，但脸型部分全为0，其余部分全为1. 两张图相当于两个矩阵，两者对应元素相乘，就得到挖去脸的图片。此时如果我有另外一张脸，脸部全为1， 其余部分全是0，那么用两张图对应元素一一相加，就可以得到最终的换脸后的图片。</p><h5 id="4-衔接过渡脸的边缘"><a href="#4-衔接过渡脸的边缘" class="headerlink" title="4. 衔接过渡脸的边缘"></a>4. 衔接过渡脸的边缘</h5><p>用上面的方法换的脸，看上去很不自然。此时可以把“新脸”的亮度调整得和“旧脸”差不多，边缘进行一些模糊，让其过渡自然。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上便是基本思路，有了这样的思路，就可以根据需要很好得进行算法修改。下面进入第二部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总序&quot;&gt;&lt;a href=&quot;#总序&quot; class=&quot;headerlink&quot; title=&quot;总序&quot;&gt;&lt;/a&gt;总序&lt;/h2&gt;&lt;p&gt;“换脸”Python实现共分为四个部分，第一部分是原理讲解，第二部分是Python实现，第三部分是效果改进，前三部分都是单张图片，第四部分是
      
    
    </summary>
    
    
      <category term="entertainment study" scheme="http://yoursite.com/tags/entertainment-study/"/>
    
  </entry>
  
</feed>
